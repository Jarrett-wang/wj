1. 项目背景与需求
      电销网络需要实现网页端拨号的功能，使用webRtc技术通过freeSwitch直接向用户手机发起呼叫。软电话作为CRM的一个公共组件，各产品模块需要时，都调用相同的软电话控件。该需求最核心的是各种软电话状态的整合，用同样的组件，实现对不同业务场景的处理。

      通过浏览器直接拨号存在多tab页、多浏览器的状态管理的问题。目前有以下几种方案： 1. localStorage 状态共享 2. node.js Electron 封装桌面应用。 以上两种方案都存在各自的缺点，我们期望将H5软电话模块作为一个独立的模块，能够方便地管理自身的状态，不受多端、多tab页的影响。因此拥有独立线程的service workers 成为了一套备选方案，本文的重点是对h5软电话使用service workers进行可行性分析。

2. service workers 是什么？
      Service workers 本质上充当Web应用程序与浏览器之间的代理服务器，也可以在网络可用时作为浏览器和网络间的代理。它们旨在使得能够创建有效的离线体验，拦截网络请求并基于网络是否可用以及更新的资源是否驻留在服务器上来采取适当的动作。他们还允许访问推送通知和后台API。它具有以下优势：

基于web worker（一个独立于JavaScript主线程的独立线程，在里面执行需要消耗大量资源的操作不会堵塞主线程）
在web worker的基础上增加了离线缓存的能力
本质上充当Web应用程序（服务器）与浏览器之间的代理服务器（可以拦截全站的请求，并作出相应的动作->由开发者指定的动作）
创建有效的离线体验（将一些不常更新的内容缓存在浏览器，提高访问体验）
由事件驱动的,具有生命周期
可以访问cache和indexDB
支持推送
并且可以让开发者自己控制管理缓存的内容以及版本

3. service workers 解决了什么问题？
      经过调研发现，service workers 主要的应用领域在于离线缓存技术。对于已安装service workers 的站点，全局拦截请求，根据规则来决定是否加载缓存。可以显著提高诸如落地页、首页、展示页等页面的加载速度，甚至可以在用户断网的情况下展示页面。另一个应用是对消息订阅者推送浏览器通知。 如图：



4. service workers 的局限
    service workers 的应用主要在于前端数据的领域，它可以异步地操作浏览器的cache、indexDB，但不能访问同步的localStorage，也不能操作DOM元素。
    无法使用它直接构成一个前端组件
    兼容性问题
桌面端sercice workers 兼容性情况

注：苹果公司从 ios11.3之后才开始在Safari浏览器中部分支持 service workers，但是它的标准和w3c标准不同，在浏览器端存在适配的困难。 在APP端，目前 ios APP 内嵌h5页面使用的WKWebView不支持这项技术。

5. 总结
       进过调研分析，service workers 主要用来解决的是前端数据资源的问题，使得网页应用如同小程序一般，拥有一套缓存，即便在离线状态下页面也能展示一些内容。而对于我们的需求来说，它是不合适的。首先它本身并不能做成一套前端组件，使用它做数据管理对于我们的业务来说并没有解决我们的问题。其次它的兼容性存在很大的问题，移动端IOS APP不可用，需要额外开发，这背离了我们希望 “用同样的组件，实现对不同业务场景的处理” 的初衷，故结论为不可行。